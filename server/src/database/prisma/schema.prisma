// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  CREATOR
  PUBLISHER
}

enum SheetType {
  SHEET
  TEMPLATE
}

enum TemplateType {
  PAGE
  SHEET
}

model LicenseKey {
  key    String  @id
  email  String  @unique
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])
}

// Lists Published rulesets created by QB
model OfficialContent {
  id       String @id @default(uuid())
  title    String
  key      String @unique
  type     String
  entityId String @unique
}

model PlayTester {
  id         String  @id @default(uuid())
  ruleset    Ruleset @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  rulesetId  String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  permission String  @default("READ")
}

model User {
  id                   String                       @id @default(uuid())
  license              LicenseKey?
  authId               String?                      @unique
  createdAt            DateTime                     @default(now())
  metadata             Json                         @default("{}")
  role                 Role                         @default(USER)
  membershipExpiration DateTime?
  stripeId             String?                      @unique
  email                String                       @unique
  username             String                       @unique
  preferences          Json                         @default("{}")
  storageAllotment     Int                          @default(100)
  onboarded            Boolean                      @default(false)
  rulesets             Ruleset[]
  characters           Character[]
  companion            Companion?
  avatar               Image?                       @relation(name: "UserAvatar", fields: [avatarId], references: [id])
  avatarId             String?                      @unique
  images               Image[]
  rulesetPermissions   PublishedRulesetPermission[] @relation("PublishedRulesetPermissions")
  playTesters          PlayTester[]
}

model Companion {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String?
  description String?
  model       String   @default("gpt-3.5-turbo")
  color       String?
  animal      String?
  image       Image?   @relation(fields: [imageId], references: [id])
  imageId     String?  @unique
}

model Image {
  id                       String                     @id @default(uuid())
  createdAt                DateTime                   @default(now())
  name                     String
  src                      String? // Images without a src are considered a directory
  sortIndex                Int                        @default(0)
  hidden                   Boolean                    @default(false)
  parentId                 String?
  parent                   Image?                     @relation("ChildImages", fields: [parentId], references: [id])
  children                 Image[]                    @relation("ChildImages")
  details                  Json                       @default("{}")
  // Images belong to one user. They may belong to a companion or user avatar.
  // Images may belong to many sheets, sheet backgrounds, rulesets or components.
  user                     User                       @relation(fields: [userId], references: [id])
  userId                   String
  companion                Companion?
  userAvatar               User?                      @relation(name: "UserAvatar")
  rulesets                 Ruleset[]
  sheets                   Sheet[]
  sheetBackgrounds         Sheet[]                    @relation("SheetBackgroundImages")
  components               ComponentImages[]
  attributes               Attribute[]
  archetypes               Archetype[]
  characters               Character[]
  // Published Relations
  publishedRulesets        PublishedRuleset[]
  publishedAttributes      PublishedAttribute[]
  publishedSheets          PublishedSheet[]
  publishedSheetBackground PublishedSheet[]           @relation("PublishedSheetBackgroundImages")
  publishedComponents      PublishedComponentImages[]
  publishedArchetypes      PublishedArchetype[]
}

model ComponentImages {
  id          String         @id @default(uuid())
  componentId String
  component   SheetComponent @relation(fields: [componentId], references: [id], onDelete: Cascade)
  imageId     String
  image       Image          @relation(fields: [imageId], references: [id])
}

model PublishedComponentImages {
  id          String                  @id @default(uuid())
  componentId String
  component   PublishedSheetComponent @relation(fields: [componentId], references: [id], onDelete: Cascade)
  imageId     String
  image       Image                   @relation(fields: [imageId], references: [id])
}

// Draft Rulesets
// ************************************************
// These tables represent the current working version of a ruleset.
// Draft rulesets are viewable by their owners only. The may not be shared or listed on the marketplace.
//
// When a ruleset is published, a snapshot of it is copied to the published tables. THAT published
// version may be shared and listed.
//////////////////////////////////////////////////////

model Ruleset {
  id                 String       @id @default(uuid())
  version            Int          @default(1)
  isModule           Boolean      @default(false)
  rulesetPermissions Json         @default("{}")
  createdBy          String       @default("")
  createdById        String       @default("")
  createdAt          DateTime     @default(now())
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  title              String       @default("")
  description        String       @default("")
  image              Image?       @relation(fields: [imageId], references: [id])
  imageId            String?
  details            Json         @default("{}")
  sheets             Sheet[]
  pages              Page[]
  charts             Chart[]
  documents          Document[]
  attributes         Attribute[]
  archetypes         Archetype[]
  playTesters        PlayTester[]
  modules            Ruleset[]    @relation("RulesetModules")
  rulesets           Ruleset[]    @relation("RulesetModules")
  rulesetId          String? // If this is a module, this is the id of the ruleset it belongs to
  rulesetTitle       String? // If this is a module, this is the title of the ruleset it belongs to
  publishedRulesetId String? // The ID of the published ruleset from which this was copied
  approved           Boolean?     @default(false)
}

model Attribute {
  id           String   @id @default(uuid())
  entityId     String   @default(uuid())
  rulesetId    String
  ruleset      Ruleset  @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  moduleId     String?
  moduleTitle  String?
  name         String
  description  String?
  data         Json     @default("{}")
  type         String
  minValue     Float?
  maxValue     Float?
  category     String?
  defaultValue String
  restraints   String[]
  sortChildId  String?
  image        Image?   @relation(fields: [imageId], references: [id])
  logic        Json     @default("[]")
  imageId      String?
}

model Chart {
  id          String   @id @default(uuid())
  entityId    String   @default(uuid())
  rulesetId   String?
  ruleset     Ruleset? @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  moduleId    String?
  moduleTitle String?
  title       String
  fileKey     String
  data        Json     @default("[[]]")
}

model Document {
  id          String  @id @default(uuid())
  entityId    String  @default(uuid())
  rulesetId   String
  ruleset     Ruleset @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  moduleId    String?
  moduleTitle String?
  title       String
  fileKey     String
  description String?
}

model Archetype {
  id          String   @id @default(uuid())
  entityId    String   @default(uuid())
  rulesetId   String?
  ruleset     Ruleset? @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  moduleId    String?
  moduleTitle String?
  category    String?
  title       String
  description String?
  image       Image?   @relation(fields: [imageId], references: [id])
  imageId     String?
}

model Character {
  id                          String  @id @default(uuid())
  entityId                    String  @default(uuid())
  user                        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String
  rulesetId                   String
  rulesetTitle                String? @default("")
  createdFromPublishedRuleset Boolean @default(false)
  name                        String
  description                 String  @default("")
  image                       Image?  @relation(fields: [imageId], references: [id])
  imageId                     String?
  attributeData               Json    @default("[]")
  itemData                    Json    @default("[]")
  pages                       Page[]
  sheet                       Sheet?
  streamTabId                 String?
}

model Page {
  id           String     @id @default(uuid())
  entityId     String     @default(uuid())
  updatedAt    DateTime   @default(now())
  rulesetId    String?
  ruleset      Ruleset?   @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  moduleId     String?
  moduleTitle  String?
  archetypeId  String?
  title        String
  bootstrapped Boolean    @default(false)
  details      Json       @default("{}")
  content      Json       @default("{}")
  sortIndex    Int        @default(0)
  parentId     String?
  parent       Page?      @relation("ChildPages", fields: [parentId], references: [id])
  children     Page[]     @relation("ChildPages")
  sheet        Sheet?
  characterId  String?
  Character    Character? @relation(fields: [characterId], references: [id])
}

model Sheet {
  id                String           @id @default(uuid())
  entityId          String           @default(uuid())
  createdBy         String?
  ruleset           Ruleset?         @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  rulesetId         String?
  moduleId          String?
  moduleTitle       String?
  page              Page?            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId            String?          @unique
  character         Character?       @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId       String?          @unique
  createdAt         DateTime         @default(now())
  version           Int              @default(1)
  templateId        String?
  templateName      String?
  type              SheetType
  templateType      TemplateType?
  title             String
  image             Image?           @relation(fields: [imageId], references: [id])
  imageId           String?
  description       String           @default("")
  details           Json             @default("{}")
  backgroundImage   Image?           @relation("SheetBackgroundImages", fields: [backgroundImageId], references: [id])
  components        SheetComponent[]
  backgroundImageId String?
  tabs              Json             @default("[]")
  sections          Json             @default("[]")
}

model SheetComponent {
  id          String            @id @default(uuid())
  entityId    String            @default(uuid())
  createdAt   DateTime          @default(now())
  sheet       Sheet             @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  sheetId     String
  type        String
  label       String
  images      ComponentImages[]
  description String?
  layer       Int
  style       Json              @default("{}")
  data        Json              @default("{}")
  tabId       String
  locked      Boolean           @default(false)
  groupId     String?
  x           Int               @default(0)
  y           Int               @default(0)
  height      Int               @default(0)
  width       Int               @default(0)
  rotation    Int               @default(0)
}

// Published Tables 
// ************************************************
//
// When a ruleset is published, it and all its associations are copied to these tables.
// Data in published tables is never deleted.
//
//////////////////////////////////////////////////////

model PublishedRulesetPermission {
  id        String           @id @default(uuid())
  type      String
  user      User             @relation("PublishedRulesetPermissions", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  ruleset   PublishedRuleset @relation("PublishedRulesetPermissions", fields: [rulesetId], references: [id], onDelete: Cascade)
  rulesetId String
  shelved   Boolean          @default(true)
  version   Int
  salePrice Float            @default(0)
  tipAmount Float            @default(0)
  createdAt DateTime         @default(now())
}

model PublishedRuleset {
  id                 String                       @id @default(uuid())
  live               Boolean                      @default(false)
  includesAI         Boolean                      @default(false)
  includesPDF        Boolean                      @default(false)
  explicit           Boolean                      @default(false)
  version            Int                          @default(1)
  currentPrice       Float                        @default(0)
  createdAt          DateTime                     @default(now())
  userId             String
  createdBy          String
  createdById        String                       @default("")
  isModule           Boolean                      @default(false)
  rulesetId          String?
  rulesetTitle       String?
  rulesetPermissions Json                         @default("{}")
  details            Json                         @default("{}")
  userPermissions    PublishedRulesetPermission[] @relation("PublishedRulesetPermissions")
  title              String                       @default("")
  description        String                       @default("")
  image              Image?                       @relation(fields: [imageId], references: [id])
  imageId            String?
  attributes         PublishedAttribute[]
  archetypes         PublishedArchetype[]
  sheets             PublishedSheet[]
  pages              PublishedPage[]
  charts             PublishedChart[]
  documents          PublishedDocument[]
  rulesets           PublishedRuleset[]           @relation("PublishedRulesetModules")
  modules            PublishedRuleset[]           @relation("PublishedRulesetModules")
}

model PublishedAttribute {
  id           String           @id @default(uuid())
  entityId     String           @default(uuid())
  rulesetId    String
  ruleset      PublishedRuleset @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  moduleId     String?
  moduleTitle  String?
  name         String
  description  String?
  data         Json             @default("{}")
  type         String
  minValue     Float?
  maxValue     Float?
  category     String?
  defaultValue String
  restraints   String[]
  sortChildId  String?
  image        Image?           @relation(fields: [imageId], references: [id])
  imageId      String?
  logic        Json             @default("[]")
}

model PublishedArchetype {
  id          String            @id @default(uuid())
  entityId    String            @default(uuid())
  rulesetId   String?
  ruleset     PublishedRuleset? @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  moduleId    String?
  moduleTitle String?
  title       String
  description String?
  image       Image?            @relation(fields: [imageId], references: [id])
  imageId     String?
}

model PublishedSheet {
  id                String                    @id @default(uuid())
  createdBy         String?
  entityId          String                    @default(uuid())
  ruleset           PublishedRuleset          @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  rulesetId         String
  moduleId          String?
  moduleTitle       String?
  page              PublishedPage?            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId            String?                   @unique
  createdAt         DateTime                  @default(now())
  version           Int                       @default(1)
  templateId        String?
  templateName      String?
  type              SheetType
  templateType      TemplateType?
  title             String
  image             Image?                    @relation(fields: [imageId], references: [id])
  imageId           String?
  description       String                    @default("")
  details           Json                      @default("{}")
  backgroundImage   Image?                    @relation("PublishedSheetBackgroundImages", fields: [backgroundImageId], references: [id])
  components        PublishedSheetComponent[]
  backgroundImageId String?
  tabs              Json                      @default("[]")
  sections          Json                      @default("[]")
}

model PublishedSheetComponent {
  id          String                     @id @default(uuid())
  entityId    String                     @default(uuid())
  createdAt   DateTime                   @default(now())
  sheet       PublishedSheet             @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  sheetId     String
  type        String
  label       String
  images      PublishedComponentImages[]
  description String?
  layer       Int
  style       Json                       @default("{}")
  data        Json                       @default("{}")
  tabId       String
  locked      Boolean                    @default(false)
  groupId     String?
  x           Int                        @default(0)
  y           Int                        @default(0)
  height      Int                        @default(0)
  width       Int                        @default(0)
  rotation    Int                        @default(0)
}

model PublishedPage {
  id           String           @id @default(uuid())
  entityId     String           @default(uuid())
  updatedAt    DateTime         @default(now())
  ruleset      PublishedRuleset @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  rulesetId    String
  moduleId     String?
  moduleTitle  String?
  archetypeId  String?
  title        String
  details      Json             @default("{}")
  bootstrapped Boolean          @default(false)
  content      Json             @default("{}")
  sortIndex    Int              @default(0)
  parentId     String?
  parent       PublishedPage?   @relation("PublishedChildPages", fields: [parentId], references: [id])
  children     PublishedPage[]  @relation("PublishedChildPages")
  sheet        PublishedSheet?
}

model PublishedChart {
  id          String            @id @default(uuid())
  entityId    String            @default(uuid())
  rulesetId   String?
  ruleset     PublishedRuleset? @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  moduleId    String?
  moduleTitle String?
  title       String
  fileKey     String
  data        Json              @default("[[]]")
}

model PublishedDocument {
  id          String           @id @default(uuid())
  entityId    String           @default(uuid())
  rulesetId   String
  ruleset     PublishedRuleset @relation(fields: [rulesetId], references: [id], onDelete: Cascade)
  moduleId    String?
  moduleTitle String?
  title       String
  fileKey     String
  description String?
}
