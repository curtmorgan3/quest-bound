# QB Types ##############################################

type OfficialContent {
  rulesets: [Ruleset!]!
  modules: [Ruleset!]!
}

type TestConnection {
  message: String!
}

# End QB Types ##########################################

# Users #################################################
enum UserRole {
  USER
  CREATOR
  PUBLISHER
}

type User {
  id: String!
  stripeId: String
  email: String!
  username: String!
  avatarSrc: String
  storageAllotment: Int!
  companion: Companion!
  onboarded: Boolean!
  preferences: UserPreferences!
  sheets: [Sheet!]!
  rulesets: [Ruleset!]!
  images: [Image!]!
  playtestRulesets: [Ruleset!]!
  collaboratorRulesets: [Ruleset!]!
  role: UserRole!
  membershipExpiration: String!
}

type UserPreferences {
  emailUpdates: Boolean!
  emailShares: Boolean!
  emailUnsubscribe: Boolean!
}

input UserPreferencesInput {
  emailUpdates: Boolean
  emailShares: Boolean
  emailUnsubscribe: Boolean
}

type Companion {
  id: String
  name: String
  description: String
  src: String
  color: String
  animal: String
  model: String!
}

input CompanionInput {
  name: String
  description: String
  src: String
  color: String
  animal: String
  model: String
}

input CurrentUserUpdateInput {
  username: String
  avatarId: String
  companion: CompanionInput
  onboarded: Boolean
  preferences: UserPreferencesInput
}

input SearchUsersInput {
  username: String
  email: String
}

input EarlyAccessUserInput {
  email: String
}

# End Users #############################################

# Images ################################################

type Image {
  id: String!
  src: String
  name: String!
  sortIndex: Int!
  parentId: String
  details: String!
}

input CreateImage {
  src: String
  name: String!
  sortIndex: Int
  parentId: String
  details: String
}

input UpdateImage {
  id: String!
  name: String
  sortIndex: Int
  parentId: String
  details: String
}

input DeleteImage {
  id: String!
}

type DeleteImageResponse {
  safeToDeleteFile: Boolean!
  fileKey: String!
}

# End Images ############################################

# Rulesets ##############################################
type Ruleset {
  id: String!
  # From PublishedRuleset table
  version: Int!
  published: Boolean!
  images: [Image!]!
  approved: Boolean
  live: Boolean
  includesAI: Boolean
  includesPDF: Boolean
  explicit: Boolean
  ##############################
  createdAt: String!
  isModule: Boolean!
  rulesetPermissions: String!
  rulesetId: String
  publishedRulesetId: String
  rulesetTitle: String
  userId: String!
  createdBy: String!
  createdById: String!
  permissions: [String!]!
  title: String!
  description: String!
  details: String!
  image: Image
  sheets: [Sheet!]!
  pages: [Page!]!
  modules: [Ruleset!]!
  playtesters: [User!]!
}

type RulesetSalesPage {
  id: String!
  title: String!
  createdBy: String!
  createdAt: String!
  shelved: Boolean!
  explicit: Boolean!
  live: Boolean!
  description: String!
  details: String!
  price: Float!
  images: [Image!]
  currentUserHasPermission: Boolean!
  includesAI: Boolean!
  includesPDF: Boolean!
}

input CreateRuleset {
  title: String!
  rulesetId: String
  description: String
  details: String
  imageId: String
}

input UpdateRuleset {
  id: String!
  isModule: Boolean
  rulesetPermissions: String
  rulesetId: String
  title: String
  description: String
  details: String
  imageId: String
}

input UpdatePublishedRuleset {
  id: String!
  live: Boolean
  includesAI: Boolean
  includesPDF: Boolean
  explicit: Boolean
  version: Int
  price: Float
  isModule: Boolean
  rulesetPermissions: String
  rulesetId: String
  title: String
  description: String
  details: String
  imageId: String
}

input DeleteRuleset {
  id: String!
}

type RulesetPermission {
  permission: String!
  user: User!
  shelved: Boolean!
}

input AddRulesetPermission {
  rulesetId: String!
  userId: String!
  permission: String!
  shelved: Boolean
}

input UpdateRulesetPermission {
  rulesetId: String!
  userId: String!
  permission: String!
  shelved: Boolean!
}

input RemoveRulesetPermission {
  rulesetId: String!
  userId: String!
  permission: String!
}

input PublishRuleset {
  id: String!
  version: Int!
}

input AddToShelf {
  id: String!
  isModule: Boolean
}

input AddModule {
  moduleId: String!
  rulesetId: String!
}

input RemoveModule {
  moduleId: String!
  rulesetId: String!
}

input GetEntity {
  id: String!
  rulesetId: String!
}

input DeleteEntity {
  id: String!
  rulesetId: String!
}

input AddPlaytester {
  rulesetId: String!
  userId: String!
}

input RemovePlaytester {
  rulesetId: String!
  userId: String!
}

# End Rulesets ##########################################

# Attributes ############################################
enum AttributeType {
  TEXT
  NUMBER
  COLOR
  BOOLEAN
  ACTION
  ITEM
}

type Attribute {
  id: String!
  rulesetId: String!
  moduleId: String
  moduleTitle: String
  name: String!
  description: String
  data: String!
  type: AttributeType!
  defaultValue: String!
  minValue: Float
  maxValue: Float
  category: String
  restraints: [String!]
  logic: String!
  sortChildId: String
  image: Image
  # Variations exist on the ArchetypeAttribute table
  variation: String
  source: String
  sourceId: String
}

input CreateAttribute {
  rulesetId: String!
  name: String!
  description: String
  type: AttributeType!
  defaultValue: String!
  imageId: String
  data: String
  minValue: Float
  maxValue: Float
  category: String
  restraints: [String!]
  sortChildId: String
}

input UpdateAttribute {
  id: String!
  rulesetId: String!
  imageId: String
  name: String
  sheetId: String
  data: String
  description: String
  type: AttributeType
  defaultValue: String
  minValue: Float
  maxValue: Float
  category: String
  restraints: [String!]
  sortChildId: String
  logic: String
  variation: String
}

input UpdateAttributeOrder {
  rulesetId: String!
  attributes: [UpdateAttribute!]!
}

# End Attributes ########################################

# Archetypes ############################################
type Archetype {
  id: String!
  rulesetId: String!
  moduleId: String
  moduleTitle: String
  category: String
  title: String!
  description: String
  image: Image
}

input CreateArchetype {
  rulesetId: String!
  moduleId: String
  title: String!
  category: String
  description: String
  imageId: String
}

input UpdateArchetype {
  id: String!
  rulesetId: String!
  title: String
  category: String
  description: String
  imageId: String
}

# End Archetypes ########################################

# Characters ############################################
type Character {
  id: String!
  rulesetId: String!
  rulesetTitle: String!
  username: String!
  createdFromPublishedRuleset: Boolean!
  name: String!
  description: String
  attributes: [Attribute!]!
  pages: [Page!]!
  attributeData: String!
  itemData: String!
  image: Image
  sheet: Sheet
  streamTabId: String
}

input CreateCharacter {
  rulesetId: String!
  name: String!
  createdFromPublishedRuleset: Boolean!
  description: String
  templateId: String
  imageId: String
}

input UpdateCharacter {
  id: String!
  name: String
  description: String
  imageId: String
  attributeData: String
  itemData: String
  templateId: String
  streamTabId: String
}

input AddAttributeToCharacter {
  rulesetId: String!
  characterId: String!
  attributeId: String!
}

input RemoveAttributeFromCharacter {
  rulesetId: String!
  characterId: String!
  attributeId: String!
}

# End Characters ########################################

# Pages #################################################

type Page {
  id: String!
  sheetId: String!
  rulesetId: String
  archetypeId: String
  characterId: String
  title: String!
  details: String!
  content: String!
  sortIndex: Int!
  parentId: String
  sheet: Sheet!
}

input CreatePage {
  # Optionally create page ID on the client
  id: String
  title: String!
  templateId: String
  archetypeId: String
  characterId: String
  sortIndex: Int
  rulesetId: String!
  content: String
  details: String
  parentId: String
}

input CreatePageTemplate {
  pageId: String!
  rulesetId: String!
  title: String
  description: String
}

input UpdatePage {
  id: String!
  rulesetId: String!
  archetypeId: String
  sheetId: String
  sortIndex: Int
  title: String
  content: String
  details: String
  parentId: String
}

# End Pages #############################################

# Charts ################################################
type Chart {
  id: String!
  rulesetId: String!
  moduleId: String
  moduleTitle: String
  title: String!
  fileKey: String!
  data: [[String!]!]
}

input CreateChart {
  rulesetId: String!
  title: String!
  fileKey: String!
}

input UpdateChart {
  id: String!
  rulesetId: String!
  title: String
  fileKey: String
  data: String
}

# End Charts ############################################

# Documents #############################################
type Document {
  id: String!
  rulesetId: String!
  moduleId: String
  moduleTitle: String
  title: String!
  fileKey: String!
}

input CreateDocument {
  rulesetId: String!
  title: String!
  fileKey: String!
}

input UpdateDocument {
  id: String!
  rulesetId: String!
  title: String
  fileKey: String
}

input BootstrapRulebook {
  rulesetId: String!
  id: String!
}

# End Documents #########################################

# Sheets ################################################
type Sheet {
  id: String!
  rulesetId: String
  pageId: String
  rulesetTitle: String
  type: SheetType!
  templateId: String
  templateName: String
  templateType: TemplateType
  userId: String!
  username: String!
  version: Float!
  title: String!
  description: String!
  image: Image
  backgroundImage: Image
  details: String!
  components: [SheetComponent!]!
  tabs: String!
}

input CreateSheet {
  rulesetId: String
  pageId: String
  characterId: String
  type: SheetType
  templateId: String
  templateType: TemplateType
  templateName: String
  version: Float
  title: String
  description: String
  imageId: String
  backgroundImageId: String
  details: String
  tabs: String
}

input UpdateSheet {
  id: String!
  rulesetId: String!
  pageId: String
  templateType: TemplateType
  title: String
  description: String
  imageId: String
  backgroundImageId: String
  details: String
  type: SheetType
  templateId: String
  templateName: String
  tabs: String
}

enum SheetType {
  SHEET
  TEMPLATE
}

enum TemplateType {
  PAGE
  SHEET
}

input CreateShareSheet {
  email: String!
  sheetId: String!
}

type ShareSheetResponse {
  email: String
  username: String
  avatarSrc: String
  preferences: UserPreferences
}

# End Sheets ############################################

# Sheet Components ######################################
enum Viewport {
  DESKTOP
  TABLET
  MOBILE
}

type SheetComponent {
  id: String!
  sheetId: String!
  rulesetId: String!
  type: String!
  label: String!
  description: String
  images: [Image!]
  locked: Boolean!
  tabId: String!
  layer: Int!
  style: String!
  data: String!
  groupId: String
  x: Int!
  y: Int!
  width: Int!
  height: Int!
  rotation: Int!
}

input CreateSheetComponent {
  id: String!
  rulesetId: String!
  sheetId: String!
  tabId: String!
  type: String!
  label: String!
  description: String
  locked: Boolean!
  layer: Int!
  style: String!
  data: String!
  groupId: String
  imageIds: [String!]
  x: Int!
  y: Int!
  width: Int!
  height: Int!
  rotation: Int!
}

input UpdateSheetComponent {
  id: String!
  characterId: String # Used to trigger pub for stream subscription
  rulesetId: String!
  sheetId: String!
  label: String
  description: String
  type: String
  tabId: String
  locked: Boolean
  groupId: String
  layer: Int
  style: String
  imageIds: [String!]
  removeImageIds: [String!]
  data: String
  x: Int
  y: Int
  width: Int
  height: Int
  rotation: Int
}

input DeleteSheetComponent {
  id: String!
  rulesetId: String!
  sheetId: String!
}

type UpdateSheetComponentsResponse {
  failedUpdateIds: [String!]!
}

input GetSheetComponents {
  sheetId: String!
  rulesetId: String!
  tabId: String
}

# End Sheet Components ##################################

# GraphQL base types

type Mutation {
  # Users
  updateCurrentUser(input: CurrentUserUpdateInput!): User!

  # Images
  createImage(input: CreateImage!): Image!
  updateImage(input: UpdateImage!): Image!
  updateImages(input: [UpdateImage!]!): [Image!]!
  deleteImage(input: DeleteImage!): DeleteImageResponse!
  clearImages: String!

  # Rulesets
  createRuleset(input: CreateRuleset!): Ruleset!
  updateRuleset(input: UpdateRuleset!): Ruleset!
  addRulesetPermission(input: AddRulesetPermission!): String!
  removeRulesetPermission(input: RemoveRulesetPermission!): String!
  updateRulesetPermission(input: UpdateRulesetPermission!): String!
  deleteRuleset(input: DeleteRuleset!): String!
  deletePublishedRuleset(input: DeleteRuleset!): String!
  addPlaytester(input: AddPlaytester!): String!
  removePlaytester(input: RemovePlaytester!): String!

  publishRuleset(input: PublishRuleset!): Ruleset!
  updatePublishedRuleset(input: UpdatePublishedRuleset!): Ruleset!
  addToShelf(input: AddToShelf!): Ruleset!
  addModule(input: AddModule!): Ruleset!
  removeModule(input: RemoveModule!): Ruleset!

  # Pages
  createPage(input: CreatePage!): Page!
  createPageTemplate(input: CreatePageTemplate!): Sheet!
  updatePages(input: [UpdatePage!]!): [Page!]!
  deletePage(input: DeleteEntity!): String!

  # Charts
  createChart(input: CreateChart!): Chart!
  updateChart(input: UpdateChart!): Chart!
  deleteChart(input: DeleteEntity!): String!

  # Documents
  createDocument(input: CreateDocument!): Document!
  updateDocument(input: UpdateDocument!): Document!
  deleteDocument(input: DeleteEntity!): String!
  bootstrapRulebook(input: BootstrapRulebook!): String!
  deleteBootstrap(rulesetId: String!): String!

  # Attributes
  createAttribute(input: CreateAttribute!): Attribute!
  updateAttribute(input: UpdateAttribute!): Attribute!
  deleteAttribute(input: DeleteEntity!): String!
  updateAttributeOrder(input: UpdateAttributeOrder!): String!

  # Archetypes
  createArchetype(input: CreateArchetype!): Archetype!
  updateArchetype(input: UpdateArchetype!): Archetype!
  deleteArchetype(input: DeleteEntity!): String!

  # Characters
  createCharacter(input: CreateCharacter!): Character!
  updateCharacter(input: UpdateCharacter!): Character!
  deleteCharacter(id: String!): String!

  # Sheets
  createSheet(input: CreateSheet!): Sheet!
  updateSheet(input: UpdateSheet!): Sheet!
  deleteSheet(input: DeleteEntity!): String!

  # Sheet Components
  createSheetComponents(input: [CreateSheetComponent!]!): [SheetComponent!]!
  updateSheetComponents(input: [UpdateSheetComponent!]!): UpdateSheetComponentsResponse!
  deleteSheetComponents(input: [DeleteSheetComponent!]!): String!
}

type Query {
  officialContent: OfficialContent!
  testConnection: TestConnection!

  # Images
  images: [Image!]!

  # Users
  currentUser: User!
  searchUsers(input: SearchUsersInput!): [User!]
  earlyAccessUser(input: EarlyAccessUserInput!): String

  # Rulesets
  ruleset(id: String!): Ruleset!
  rulesets: [Ruleset!]!
  #Current user's permitted rulesets
  permittedRulesets: [Ruleset!]!
  #Users permitted to view a given ruleset
  permittedUsers(id: String!): [RulesetPermission!]!
  rulesetSalesPage(id: String!): RulesetSalesPage!

  # Pages
  pageTemplates(rulesetId: String!): [Sheet!]!
  pages(rulesetId: String!): [Page!]!
  page(input: GetEntity!): Page!

  # Charts
  charts(rulesetId: String!): [Chart!]!
  chart(input: GetEntity!): Chart!

  # Documents
  documents(rulesetId: String!): [Document!]!
  document(input: GetEntity!): Document!

  # Attributes
  attributes(rulesetId: String!, page: Int, type: AttributeType): [Attribute!]!
  attribute(input: GetEntity!): Attribute!

  # Archetypes
  archetypes(rulesetId: String!): [Archetype!]!
  archetype(input: GetEntity!): Archetype!

  # Characters
  characters: [Character!]!
  character(id: String!): Character!

  # Sheets
  sheetTemplates(rulesetId: String!, published: Boolean): [Sheet!]!
  sheet(input: GetEntity!): Sheet!

  # Sheet Components
  sheetComponents(input: GetSheetComponents!): [SheetComponent!]!
}

type Subscription {
  streamCharacter(id: String!): Character!
  streamComponents(input: GetSheetComponents!): [SheetComponent!]!
}
